<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:Antd.Controls"
                    xmlns:Helpers="clr-namespace:Antd.Helpers"
                    xmlns:Animations="clr-namespace:Antd.Animations"
                    xmlns:Converters="clr-namespace:Antd.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Antd;component/Styles/Internal.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--
        Why do you need so many templates?
    
        VisualStateManager.VisualStateGroups Is read only And does not support binding element attributes
    
        Use animations in triggers?
    
        Dynamic resources are not supported
    -->
    <Storyboard x:Key="Ant.DisabledButtonStoryboard">
        <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" 
                                   ToEx="{DynamicResource ButtonDisableForeground}" />
        <Animations:ColorAnimation Storyboard.TargetName="Border"
                                   Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" 
                                   ToEx="{DynamicResource ButtonDisableBackground}" />
        <Animations:ColorAnimation Storyboard.TargetName="Border"
                                   Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)" 
                                   ToEx="{DynamicResource ButtonDisableBorder}" />
    </Storyboard>
    
    <Storyboard x:Key="Ant.ButtonEffectStoryboard">
        <DoubleAnimation Storyboard.TargetName="Effect" 
                         Storyboard.TargetProperty="(UIElement.Opacity)"
                         EasingFunction="{StaticResource EaseOutCirc}"
                         Duration="0:0:0.4"
                         From="0.5"
                         To="0" />
        <ThicknessAnimation Storyboard.TargetName="Effect" 
                            Storyboard.TargetProperty="(FrameworkElement.Margin)"
                            EasingFunction="{StaticResource EaseOutCirc}"
                            Duration="0:0:0.4"
                            From="-1"
                            To="-5.6" />
    </Storyboard>

    <Storyboard x:Key="Ant.ButtonFocusedStoryboard">
        <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)"
                                   ToEx="{DynamicResource ButtonDefaultFocusedBrush}" />
        <Animations:ColorAnimation Storyboard.TargetName="Border"
                                   Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                   ToEx="{DynamicResource ButtonDefaultFocusedBrush}" />
    </Storyboard>

    <Storyboard x:Key="Ant.PrimaryButtonFocusedStoryboard">
        <Animations:ColorAnimation Storyboard.TargetName="Border"
                                   Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                   ToEx="{DynamicResource ButtonPrimaryFocusedBrush}" />
        <Animations:ColorAnimation Storyboard.TargetName="Border"
                                   Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                   ToEx="{DynamicResource ButtonPrimaryFocusedBrush}" />
    </Storyboard>

    <Storyboard x:Key="Ant.ButtonLoadedStoryboard">
        <DoubleAnimation Storyboard.TargetName="Border"
                         Storyboard.TargetProperty="(UIElement.Opacity)"
                         Duration="0"
                         To="0.65" />
    </Storyboard>
    
    <ControlTemplate x:Key="Ant.ButtonTemplate" TargetType="{x:Type Controls:Button}">
        <Grid UseLayoutRounding="True">
            <!-- Effect -->
            <Border x:Name="Effect"
                    Opacity="0"
                    BorderThickness="6"
                    BorderBrush="{DynamicResource ButtonPrimaryBackground}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Border -->
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Content -->
            <Grid Margin="{TemplateBinding Padding}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ColumnDefinition Width="Auto" />
                    <!-- Content -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Controls:Icon x:Name="Icon" Grid.Column="0" Type="{TemplateBinding Icon}" />
                <Controls:ContentControl x:Name="Content"
                                         Grid.Column="1"
                                         RecognizesAccessKey="True"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         ContentCharacterCasing="{Binding Path=(Helpers:Control.ContentCharacterCasing), 
                                                                        RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" To="Pressed" />
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver" Storyboard="{StaticResource Ant.ButtonFocusedStoryboard}" />
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDefaultPressedBrush}"
                                                       Duration="0" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDefaultPressedBrush}"
                                                       Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" Storyboard="{StaticResource Ant.DisabledButtonStoryboard}" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Focused" Storyboard="{StaticResource Ant.ButtonFocusedStoryboard}" />
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="LoadStates">
                    <VisualState x:Name="Loaded" Storyboard="{StaticResource Ant.ButtonLoadedStoryboard}" />
                    <VisualState x:Name="Unloaded" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Grid.ColumnSpan" Value="2" />
            </Trigger>
            <DataTrigger Binding="{Binding Icon, RelativeSource={RelativeSource Self}, 
                                        Converter={x:Static Converters:StringToBooleanConverter.Instance}}" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="8 0 0 0" />
            </DataTrigger>
            <EventTrigger RoutedEvent="ButtonBase.Click">
                <BeginStoryboard Storyboard="{StaticResource Ant.ButtonEffectStoryboard}" />
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Ant.PrimaryButtonTemplate" TargetType="{x:Type Controls:Button}">
        <Grid UseLayoutRounding="True">
            <!-- Effect -->
            <Border x:Name="Effect"
                    Opacity="0"
                    BorderThickness="6"
                    BorderBrush="{DynamicResource ButtonPrimaryBackground}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Border -->
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Content -->
            <Grid Margin="{TemplateBinding Padding}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ColumnDefinition Width="Auto" />
                    <!-- Content -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Controls:Icon x:Name="Icon" Grid.Column="0" Type="{TemplateBinding Icon}" />
                <Controls:ContentControl x:Name="Content"
                                             Grid.Column="1"
                                             RecognizesAccessKey="True"
                                             Content="{TemplateBinding Content}"
                                             ContentTemplate="{TemplateBinding ContentTemplate}"
                                             ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                             ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                             ContentCharacterCasing="{Binding Path=(Helpers:Control.ContentCharacterCasing), 
                                                                        RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" To="Pressed"  />
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver" Storyboard="{StaticResource Ant.PrimaryButtonFocusedStoryboard}" />
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                            Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                                            ToEx="{DynamicResource ButtonPrimaryPressedBrush}"
                                                            Duration="0" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                            Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                                            ToEx="{DynamicResource ButtonPrimaryPressedBrush}"
                                                            Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" Storyboard="{StaticResource Ant.DisabledButtonStoryboard}" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Focused" Storyboard="{StaticResource Ant.PrimaryButtonFocusedStoryboard}" />
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="LoadStates">
                    <VisualState x:Name="Loaded" Storyboard="{StaticResource Ant.ButtonLoadedStoryboard}" />
                    <VisualState x:Name="Unloaded" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Grid.ColumnSpan" Value="2" />
            </Trigger>
            <DataTrigger Binding="{Binding Icon, RelativeSource={RelativeSource Self}, 
                                        Converter={x:Static Converters:StringToBooleanConverter.Instance}}" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="8 0 0 0" />
            </DataTrigger>
            <EventTrigger RoutedEvent="ButtonBase.Click">
                <BeginStoryboard Storyboard="{StaticResource Ant.ButtonEffectStoryboard}" />
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="Ant.DangerButtonTemplate" TargetType="{x:Type Controls:Button}">
        <Grid UseLayoutRounding="True">
            <!-- Effect -->
            <Border x:Name="Effect"
                    Opacity="0"
                    BorderThickness="6"
                    BorderBrush="{DynamicResource ButtonDangerForeground}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Border -->
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    CornerRadius="{Binding Path=(Helpers:Control.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Content -->
            <Grid Margin="{TemplateBinding Padding}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <Grid.ColumnDefinitions>
                    <!-- Icon -->
                    <ColumnDefinition Width="Auto" />
                    <!-- Content -->
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Controls:Icon x:Name="Icon" Grid.Column="0" Type="{TemplateBinding Icon}" />
                <Controls:ContentControl x:Name="Content"
                                         Grid.Column="1"
                                         RecognizesAccessKey="True"
                                         Content="{TemplateBinding Content}"
                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                         ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                         ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                         ContentCharacterCasing="{Binding Path=(Helpers:Control.ContentCharacterCasing), 
                                                                        RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" To="Pressed"  />
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" 
                                                       ToEx="{DynamicResource ButtonPrimaryForeground}" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDangerFocusedBrush}" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDangerFocusedBrush}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" 
                                                       ToEx="{DynamicResource ButtonPrimaryForeground}"
                                                       Duration="0" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDangerPressedBrush}"
                                                       Duration="0" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDangerPressedBrush}"
                                                       Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled" Storyboard="{StaticResource Ant.DisabledButtonStoryboard}" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" GeneratedEasingFunction="{StaticResource EaseInOut}" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <Animations:ColorAnimation Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" 
                                                       ToEx="{DynamicResource ButtonDangerFocusedBrush}" />
                            <ColorAnimation Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                            To="White" />
                            <Animations:ColorAnimation Storyboard.TargetName="Border"
                                                       Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)"
                                                       ToEx="{DynamicResource ButtonDangerFocusedBrush}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="LoadStates">
                    <VisualState x:Name="Loaded" Storyboard="{StaticResource Ant.ButtonLoadedStoryboard}" />
                    <VisualState x:Name="Unloaded" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Grid.ColumnSpan" Value="2" />
            </Trigger>
            <DataTrigger Binding="{Binding Icon, RelativeSource={RelativeSource Self}, 
                                        Converter={x:Static Converters:StringToBooleanConverter.Instance}}" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="8 0 0 0" />
            </DataTrigger>
            <EventTrigger RoutedEvent="ButtonBase.Click">
                <BeginStoryboard Storyboard="{StaticResource Ant.ButtonEffectStoryboard}" />
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style TargetType="{x:Type Controls:Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeBase}" />
        <Setter Property="Padding" Value="{DynamicResource ButtonPaddingBase}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonDefaultForeground}" />
        <Setter Property="Background" Value="{DynamicResource ButtonDefaultBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonDefaultBorder}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThicknessBase}" />
        <Setter Property="Template" Value="{StaticResource Ant.ButtonTemplate}" />
        <Setter Property="Helpers:Control.CornerRadius" Value="{DynamicResource ButtonBorderRadiusBase}" />
        <Style.Triggers>
            <!-- Primary -->
            <Trigger Property="Type" Value="Primary">
                <Setter Property="Foreground" Value="{DynamicResource ButtonPrimaryForeground}" />
                <Setter Property="Background" Value="{DynamicResource ButtonPrimaryBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonPrimaryBackground}" />
                <Setter Property="Template" Value="{StaticResource Ant.PrimaryButtonTemplate}" />
            </Trigger>
            <!-- Danger -->
            <Trigger Property="Type" Value="Danger">
                <Setter Property="Foreground" Value="{DynamicResource ButtonDangerForeground}" />
                <Setter Property="Background" Value="{DynamicResource ButtonDangerBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonDangerBorder}" />
                <Setter Property="Template" Value="{StaticResource Ant.DangerButtonTemplate}" />
            </Trigger>
            <Trigger Property="Ghost" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="Loading" Value="True">
                <Setter Property="Icon" Value="loading" />
            </Trigger>
            <Trigger Property="Circular" Value="True">
                <Setter Property="Padding" Value="0" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="Helpers:Control.CornerRadius" Value="16" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>